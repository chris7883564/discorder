("use node");

import { v } from "convex/values";
import Replicate from "replicate";
import { internalAction, internalMutation } from "./_generated/server";

const replicate = new Replicate({
	auth: process.env.REPLICATE_API_KEY,
});

// interface whisperOutput {
// 	detected_language: string;
// 	segments: any;
// 	transcription: string;
// 	translation: string | null;
// }

interface ReplicateOutput {
	text: string;
	chunks: {
		text: string;
		timestamp: [number, number];
	}[];
}

export const transcribe = internalAction({
	args: {
		fileUrl: v.string(),
		id: v.id("notes"),
	},
	handler: async (ctx, args) => {
		// const audio = fs.readFileSync(fileUrl);
		const replicateOutput = (await replicate.run(
			"vaibhavs10/incredibly-fast-whisper:3ab86df6c8f54c11309d4d1f930ac292bad43ace52d10c80d87eb258b3c9f79c",
			{
				input: {
					task: "transcribe",
					audio: args.fileUrl,
					language: "english",
					timestamp: "chunk",
					batch_size: 16,
					return_timestamps: true,
					diarise_audio: false,
				},
			},
		)) as ReplicateOutput;

		const result = [
			{
				text: replicateOutput.text,
				from: -1,
				to: -1,
			},
		];
		console.log(result);

		// await ctx.runMutation(internal.whisper.saveTranscript, {
		// 	id: args.id,
		// 	result.text,
		// });
	},
});

export const saveTranscript = internalMutation({
	args: {
		id: v.id("notes"),
		transcript: v.string(),
	},
	handler: async (ctx, args) => {
		const { id, transcript } = args;

		await ctx.db.patch(id, {
			transcription: transcript,
			generatingTranscript: false,
		});

		// await ctx.scheduler.runAfter(0, internal.together.chat, {
		// 	id: args.id,
		// 	transcript,
		// });

		// await ctx.scheduler.runAfter(0, internal.together.embed, {
		// 	id: args.id,
		// 	transcript: transcript,
		// });
	},
});
